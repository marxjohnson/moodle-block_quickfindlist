{"version":3,"file":"quickfindlist.min.js","sources":["../src/quickfindlist.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {call as fetchMany} from 'core/ajax';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n/**\n * @var {Element} blockinstance\n */\nlet blockinstance;\n\n/**\n * Return list of users\n * @param {Number} blockinstanceid\n * @param {String} search\n * @return {Promise}\n */\nconst fetchUsers = (blockinstanceid, search) => {\n    return fetchMany([{\n        methodname: 'block_quickfindlist_search_users',\n        args: {\n            blockinstanceid,\n            search,\n        },\n    }])[0];\n};\n\nconst search = async(roleid, search) => {\n    const pending = new Pending(`quickfindlist${roleid}`);\n    const progress = blockinstance.querySelector('.quickfindprogress');\n    try {\n        progress.style.visibility = 'visible';\n        const results = await fetchUsers(blockinstance.dataset.instanceId, search);\n        const {html, js} = await Templates.renderForPromise('block_quickfindlist/results', results);\n        Templates.replaceNode(blockinstance.querySelector('.quickfindlistresults'), html, js);\n        progress.style.visibility = 'hidden';\n    } catch (e) {\n        progress.style.visibility = 'hidden';\n        Notification.exception(e);\n        return pending.reject();\n    }\n\n    return pending.resolve();\n};\n\nconst searchOnType = (e) => {\n    search(e.target.dataset.roleid, e.target.value);\n};\n\nconst searchOnSubmit = (e) => {\n    e.preventDefault();\n    const searchInput = e.target.querySelector('.quickfindlistsearch');\n    search(e.target.dataset.roleid, searchInput.value);\n};\n\nexport default {\n    init(instanceid) {\n        blockinstance = document.querySelector(`.block_quickfindlist[data-instance-id=\"${instanceid}\"]`);\n        blockinstance.querySelector('.quickfindlistsearch').addEventListener('keyup', searchOnType);\n        blockinstance.querySelector('form').addEventListener('submit', searchOnSubmit);\n    }\n};"],"names":["blockinstance","search","async","roleid","pending","Pending","progress","querySelector","style","visibility","results","blockinstanceid","methodname","args","fetchUsers","dataset","instanceId","html","js","Templates","renderForPromise","replaceNode","e","exception","reject","resolve","searchOnType","target","value","searchOnSubmit","preventDefault","searchInput","init","instanceid","document","addEventListener"],"mappings":"yQAuBIA,gPAkBEC,OAASC,MAAMC,OAAQF,gBACnBG,QAAU,IAAIC,wCAAwBF,SACtCG,SAAWN,cAAcO,cAAc,0BAEzCD,SAASE,MAAMC,WAAa,gBACtBC,aAfK,EAACC,gBAAiBV,UAC1B,cAAU,CAAC,CACdW,WAAY,mCACZC,KAAM,CACFF,gBAAAA,gBACAV,OAAAA,WAEJ,GAQsBa,CAAWd,cAAce,QAAQC,WAAYf,SAC7DgB,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,8BAA+BV,4BACzEW,YAAYrB,cAAcO,cAAc,yBAA0BU,KAAMC,IAClFZ,SAASE,MAAMC,WAAa,SAC9B,MAAOa,UACLhB,SAASE,MAAMC,WAAa,+BACfc,UAAUD,GAChBlB,QAAQoB,gBAGZpB,QAAQqB,WAGbC,aAAgBJ,IAClBrB,OAAOqB,EAAEK,OAAOZ,QAAQZ,OAAQmB,EAAEK,OAAOC,QAGvCC,eAAkBP,IACpBA,EAAEQ,uBACIC,YAAcT,EAAEK,OAAOpB,cAAc,wBAC3CN,OAAOqB,EAAEK,OAAOZ,QAAQZ,OAAQ4B,YAAYH,qBAGjC,CACXI,KAAKC,YACDjC,cAAgBkC,SAAS3B,+DAAwD0B,kBACjFjC,cAAcO,cAAc,wBAAwB4B,iBAAiB,QAAST,cAC9E1B,cAAcO,cAAc,QAAQ4B,iBAAiB,SAAUN"}